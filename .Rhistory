sqldf("select * from acs where AGEP < 50 and pwgtp1")
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readlines(con)
htmlCode = readLines(con)
close(con)
x <- htmlTreeParse(htmlCode)
str(x)
nchar(htmlCode[10])
nchar(htmlCode[c(10, 20, 30, 100)])
read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),)
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip = 0,
widths = c(15, 13,  13, 13, 8))
head(X)
str(x)
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip = 0,
widths = c(27, 3, 30))
str(x)
head(x$V2)
?read.fwf
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip = 4,
widths = c(27, 3, 30),
stringsAsFactors = FALSE)
head(x$V2)
sum(x$V2)
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip = 4,
widths = c(27, 4, 29),
stringsAsFactors = FALSE)
sum(x$V2)
head(x$V2)
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip = 4,
widths = c(27, 4, 29),
stringsAsFactors = FALSE,)
x <- read.fwf(file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"),
skip = 4,
widths = c(27, 4, 29),
stringsAsFactors = FALSE,
numerals = "no.loss")
head(x$V2)
library("dplyr")
install.packages("dplyr")
library(plyr)
library(swirl)
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
?tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -size(-5:20))
select(cran, -5:20)
select(cran, 5:20)
select()
select
-5:2-
0
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US |country == "IN")
filter(cran, country == "US |country == "IN")
filter(cran, country == "US | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(R.version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20
)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydff")
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count())
top_counts_sorted <- arrange(top_counts, count
)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View( top_unique_sorted)
submit()
sumbit()
submit()
submit()
View(result3)
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
swirl()
students2
res <- gather(students2, sex_class, count)
res<- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, sex_class, c("sex", "class"))
submit()
students3
sumbit()
submit()
submit()
?spread
submit()
?spread
submit()
library(readr)
parse_number("class5")
?mutate
submit()
submit()
submit()
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(parse_number(class))
print
students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade) %>%
### Call to mutate() goes here %>%
mutate(class = parse_number(class))
print
submit()
submit()
students4
submit()
submit()
submit()
passed
fao;ed
failerd
failed
mutate(passed, status = "passed")
passed <- mutate(passed, status = "passed")
failed <- failed %>% mutate(status = failed)
failed <- failed %>% mutate(status = "failed")
packageVersion('dplyr')
bind_rows(passed, failed)
SAT
sat
submit()
submit()
dat <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
dat <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = temp.csv)
dat <- download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "temp.csv")
read.csv("temp.csv", header = TRUE, stringsAsFactors = FALSE)
dat <- read.csv("temp.csv", header = TRUE, stringsAsFactors = FALSE)
dat <- tbl_df(dat)
dat
select(dat, ACR, AGS)
filter(dat, ACR > 10, AGS, >=6)
filter(dat, ACR > 10, AGS >=6)
filter(dat, ACR = 3, AGS =6)
filter(dat, ACR == 3, AGS ==6)
x <- read.csv("temp.csv")
agricultureLogical <- x[x$ACR ==3 & x$AGS == 6,]
agricultureLogical
agricultureLogical <- x[x$ACR ==3 & x$AGS == 6,
]
agricultureLogical
agricultureLogical <- x[x$ACR ==3 & x$AGS == 6]
y <- 1:10
t
y
as.data.frame(y)
y$grade <- 1:10
y
y$y
rm(y)
students
students$female
students$female[>0]
students$female[students$female>0]
students$female[students$female>0,]
students$female[,students$female>0]
students$female[,students$female>0]
students$female >0
rm(top_countries)
rm(top_counts)
rm(top)
top_counts_sorted
rm(top_counts_sorted)
rm(top_n())
rm(top_unique)
rm(top_unique_sorted)
rm(students)
rm(students2)
rm(students3)
rm(students4)
rm(gradebook)
rm(failed)
rm(passed)
rm(cran3)
rm(cran2)
rm(cran)
cran
rm(result1)
rm(result2)
rm(result3)
rm(by_package)
rm(pack_sum)
rm(res)
rm(student_info)
rm(sat)
rm(dat)
rm(agricultureLogical)
agricultureLogical <- x$ACR == 3 & x$AGS ==6
which(agricultureLogical)
library(jpeg)
install.packages(jpeg)
install.packages("jpeg")
library(jpeg)
jeff <- jpeg::readJPEG(url(https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg))
jeff <- jpeg::readJPEG(url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"))
jeff <- readJPEG(source = url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"))
file = url(https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg)
file = url("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
jeff <- readJPEG(file)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg', destfile = "temp.jpeg")
jeff <- readJPEG("temp.jpeg")
jeff <- readJPEG("temp.jpeg", native = TRUE)
quantile(jeff, probs=c(0.3, 0.8))
rm(list=ls())
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv', destfile = 'temp.csv')
gdp <- read.csv('temp.csv', header = TRUE, stringsAsFactors = FALSE)
download.file('https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv', destfile = 'temp.csv')
edu <- read.csv('temp.csv', header = TRUE, stringsAsFactors = FALSE)
?merge
x <- merge(gdp, edu)
x
x <- merge(gdp, edu, by = "Short.Name")
head(edu)
head(gdp)
str(gdp)
head(gdp)
head(gdp, 50)
head(gdp$X)
x <- merge(gdp, edu, by.x ="X", by.y = "CountryCode")
x[13,]
head(x, 15)
x <- tbl_df(x)
x <- arrange(x, desc(Gross.domestic.product.2012))
x[13,]
head(x)
names(x)
x$Gross.domestic.product.2012
x$Gross.domestic.product.2012 <- as.numeric(x$Gross.domestic.product.2012)
x <- arrange(x, desc(Gross.domestic.product.2012))
x[13,]
group_by(x, Income.Group)
summarize(x, mean())
summarize(x, mean(Gross.domestic.product.2012))
?summarize
summarize(x, mean = mean(Gross.domestic.product.2012))
x %>% group_by(Income.Group) %>% summarize(mean = mean(Gross.domestic.product.2012))
quantile(x$Gross.domestic.product.2012, probs = 5)
quantile(x$Gross.domestic.product.2012, probs = c(1, 0, 5))
quantile(x$Gross.domestic.product.2012, probs = c(1, 0, length = 5))
quantile(x$Gross.domestic.product.2012, probs = c(1, 0, length = 5), na.rm = TRUE)
quantile(x$Gross.domestic.product.2012, probs = c(0.2, 0.4, 0.6, 0.8, 1), na.rm = TRUE)
?cut2
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
x$groupSlice <- cut2(x$Gross.domestic.product.2012, g=5)
table(x$groupSlice)
x
str(x)
select(x, groupSlice, Gross.demestic.product.2012)
select(x, groupSlice, Gross.domestic.product.2012)
blah <- select(x, groupSlice, Gross.domestic.product.2012)
blah <- select(x, groupSlice, Gross.domestic.product.2012, Income.Group)
blah <- select(x, groupSlice, Income.Group)
table(blah)
jeff <- readJPEG("jeff.jpeg", native = TRUE)
quantile(jeff)
quantile(jeff, probs = c(0.3, 0.8))
View(x)
swirl()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date = ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19-2-012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(thi_moment, hours = 8, minutes = 34, seconds = 55)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment = update(this_moment)
this_moment = update(this_moment, hours, minutes)
this_moment = update(this_moment, hours = 8, minutes = 55)
this_moment = update(this_moment, hours = 10, minutes = 16, seconds = 0)
update(this_moment, hours = 10, minutes = 16, seconds = 0)
this_moment
?now
now(tzone = "America/New_York")
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34, seconds = 0)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_yz
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz = "Singapore")
lat_time
last_time
?interval
last_time %--% arrive
interval(last_time, arrive)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
rm(list=ls())
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", destfile = "temp.csv")
x <- read.csv("temp.csv")
strsplit(names(x), split = "wgtp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", destfile = "temp.csv")
x <- read.csv("temp.csv")
y<-gsub(",","", x$Gross.domestic.product.2012)
mean(y, na.rm=TRUE)
y
str(x)
head(x)
x <- read.csv("temp.csv", skip = 5)
head(x)
x <- read.csv("temp.csv", skip = 5, header = FALSE)
head(x)
y<-gsub(",","", x$V5)
mean(y)
mean(y, na.rm = TRUE)
x$V5 <- as.numeric(x$V5)
y<-gsub(",","", x$V5)
mean(y)
y
x$V5
head(x)
x <- read.csv("temp.csv", skip = 5, header = FALSE)
x <- read.csv("temp.csv", skip = 5, header = FALSE, stringsAsFactors = FALSE)
x$v5
x
y <- as.numeric(x$V5)
y
y <- gsub(",","",x$V5)
y
mean(y)
mean(y, na.rm = TRUE)
x$V5
x
y<-x$V4
countryNames <- y
grep("United$",countryNames), 3
grep("^United",countryNames), 3
grep("United$",countryNames)
grep("^United",countryNames)
edu <- read.csv("edu.csv")
gdp <- read.csv("gsp.csv")
gdp <- read.csv("gdp.csv")
names(edu)
edu <- read.csv("edu.csv")
gdp <- read.csv("gdp.csv")
names(edu)
names(gdp)
x <- merge(edu, gdp, by.x = "CountryCode", by.y = "country")
grep("Fiscal year end: June *", x = x)
grep("Fiscal year end: June *", x = x)
grep("Fiscal year end: June *", x = x$Special.Notes)
len<-grep("Fiscal year end: June *", x = x$Special.Notes)
length(len)
library(quantmod)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN", auto.assign = FALSE)
sampleTimes = index(amzn)
str(sampletimes)
str(sampleTimes)
grep("2012*", sampleTimes)
q<-grep("2012*", sampleTimes)
length(q)
year(sampleTimes)
q <- year(sampleTimes)
table(q)
z <- as.data.frame(z)
z <- c()
z<- as.data.frame(z)
z$years <- year(sampleTimes)
dim(z) < c(2638, -)
dim(z) < c(2638, 0)
dim(z) <- c(2638, 0)
z$years <- year(sampleTimes)
dim(z)
dim(z)<- c(238, 1)
q <- as.data.frame(q)
names(q)
q
colnames(q) <- "year"
str(q)
q$day <- day(sampleTimes)
table(q)
q$wkday <- lubridate::wday(sampleTimes)
table(q$year, q$wkday)
rm(list=ls())
setwd("C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Getting and Cleaning Data/getting_cleaning_data_project")
list.of.packages <- "dplyr"
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
packageVersion("dplyr")
version
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Getting and Cleaning Data/getting_cleaning_data_project/run_analysis.R')
View(merged_data)
names(merged_data)
z <- names(merged_data)
z
write.csv(z)
write.csv(z, file = "test.csv")
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Getting and Cleaning Data/getting_cleaning_data_project/run_analysis.R')
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Getting and Cleaning Data/getting_cleaning_data_project/run_analysis.R')
names(test_data)
x_train[, grepl("*mean\\(|std\\(*", names(x_train))]
names(x_train[, grepl("*mean\\(|std\\(*", names(x_train))])
names(x_train)
x_train[, grepl("\\.mean\\.|\\.std\\.", names(x_train))]
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Getting and Cleaning Data/getting_cleaning_data_project/run_analysis.R')
names(merged_data)
write.csv(names(merged_data), file = "test.csv")
source('C:/Users/mferris/OneDrive/Documents/Coursera/Data Science/Getting and Cleaning Data/getting_cleaning_data_project/run_analysis.R')
View(merged_data)
View(tidy_summary)
